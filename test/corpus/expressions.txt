===================
Number Literal
===================

42;
0xFF;
0b01;
0o77;
.24;
12.53E5;

-------------------

(source_file
  (expression_statement
    (literal
      (number)))
  (expression_statement
    (literal
      (number)))
  (expression_statement
    (literal
      (number)))
  (expression_statement
    (literal
      (number)))
  (expression_statement
    (literal
      (number)))
  (expression_statement
    (literal
      (number))))

===================
String Literal
===================

"hello world\n";

-------------------

(source_file
  (expression_statement
    (literal
      (string
        (string_fragment)
        (escape_sequence)))))

===================
Unary Operator
===================

-54;

-------------------

(source_file
  (expression_statement
    (unary_expression
      argument: (literal
        (number)))))

===================
Binary Operator
===================

3 + 4 * 5;
3 + 4 == 2 + 5;

-------------------

(source_file
  (expression_statement
    (binary_expression
      (literal
        (number))
      (binary_expression
        (literal
          (number))
        (literal
          (number)))))
  (expression_statement
    (binary_expression
      (binary_expression
        (literal
          (number))
        (literal
          (number)))
      (binary_expression
        (literal
          (number))
        (literal
          (number))))))

===================
Simple Lambda Expressions
===================

(x) => 5;
(a, b) => d;

-------------------

(source_file
  (expression_statement
    (lambda_expression
      (parameters
        (identifier))
      (literal
        (number))))
  (expression_statement
    (lambda_expression
      (parameters
        (identifier)
        (identifier))
      (identifier))))

===================
Block Lambda Expressions
===================

() => {
  3 + 4;
};

(a, b) => {
  return a + b;
};

-------------------

(source_file
  (expression_statement
    (lambda_expression
      (parameters)
      (statement_block
        (expression_statement
          (binary_expression
            (literal
              (number))
            (literal
              (number)))))))
  (expression_statement
    (lambda_expression
      (parameters
        (identifier)
        (identifier))
      (statement_block
        (return_statement
          (binary_expression
            (identifier)
            (identifier)))))))

===================
Call Expressions
===================

let avg = (a) => {
  return sum(a) / len(a);
};

-------------------

(source_file
  (variable_declaration
    (variable_declarator
      (identifier)
      (lambda_expression
        (parameters
          (identifier))
        (statement_block
          (return_statement
            (binary_expression
              (call_expression
                (identifier)
                (arguments
                  (identifier)))
              (call_expression
                (identifier)
                (arguments
                  (identifier))))))))))

===================
Array Expressions
===================

xs[0];
nums[xs[1] + 5];

-------------------

(source_file
  (expression_statement
    (array_expression 
      (identifier) 
      (literal (number))))
  (expression_statement
    (array_expression
      (identifier)
      (binary_expression
        (array_expression
          (identifier)
          (literal (number)))
        (literal (number))))))

